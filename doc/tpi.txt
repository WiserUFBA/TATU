TPI - Thing Protocol for Internet
==================================

Introdução:
---------------
	O TPI ou Internet Protocol for Things é um protocolo de comunicação criado
pelo grupo de desenvolvimento WiserUFBA setor TatuDev, setor tal que tem por 
objetivo a pesquisa e o desenvolvimento de hardware e software para embarcados.
O TPI nasceu com a necessidade a padronização da comunicação entre dispositivos
e serviços e por tal razão foi criado para ter o melhor desempenho tanto nos
serviços como nas coisas, para tal o TPI trabalha com uma aplicação rodando na
porta 171 e transmitindo pequenas mensagens as quais podem ser autenticadas através
de um processo próprio de autenticação também desenvolvido por nós.
	O TPI é uma das diretivas utilizadas na criação do ecossistema TATU 
(Thing Accessibility Through Utilities) para o dispositivo de codinome UFBAINO.

Funções:
---------------
	> GET
	: Funcionamento
		Requisição de informações de outra fonte ou controlador
	: Propriedades
		- ALL:  Retorna todas as informações presentes no controlador
				Sem variaveis.
		- INFO: Retorna uma informação especificada por parametro
				<var> ? string.
		- STATUS: Retorna o status de um pino
				<var> ? pin_num/sensor_num/sensor_name.
		- PROPERTY: Retorna uma propriedade do dispositivo
				<var> ? property_name.
	: Estrutura
		=======================
		GET <propriedade> <var>
		=======================

	> SET
	: Funcionamento
		Modifica uma informação em outro dispositivo
	: Propriedades
		- STATUS: Modifica o estado de uma variavel
				<var1> <valor1> ...
		- INFO: Modifica uma string
				<var1> <valor1> ...
		- RETORNO: Indica a necessidade do retorno
	: Estrutura
		================================================================
		SET <propriedade> <retorno?> <var1> <valor1> <var2> <valor2> ...
		================================================================
	
	> POST
	: Funcionamento
		Retorno de uma requisição
		O retorno de uma requisição é composto por um objeto JSON
	: Estilo
		O post é formado por dois objetos o HEADER e o BODY
		O HEADER representa o cabeçalho da requisiçao e nele estarão contidas todas as propriedades
		do dispositivo o qual está enviando as informações
		O BODY representa todas as variaveis ou informações que foram requisitadas
		- HEADER
			<propriedade1>: <valor1>, ...
		- BODY
			<type1>: {<var1>: <valor1>, ...}, ...
	: Estrutura
		============================================================================================
		POST {HEADER: { <propriedade1>: <valor1>, ...}, BODY:{<type1>: {<var1>: <valor1>, ...}, ...}  
		============================================================================================

	> EDIT
	: Funcionamento
		Modifica propriedades internas a um controlador
	: Propriedades
		- STATUS: Modifica o estado de uma variavel
				<var1> <valor1> ...
		- INFO: Modifica uma string
				<var1> <valor1> ...
		- RETORNO: Indica a necessidade do retorno
  	: Estrutura
		=================================================================
		EDIT <propriedade> <retorno?> <var1> <valor1> <var2> <valor2> ...
		=================================================================

  	> CRYPTO
  	: Funcionamento
  		Indica a criptografia de uma informação e a necessidade da descriptografia
  	: Propriedade
  	  	- REQUIRE - Prepara o sistema para o envio de um pacote criptografado
  		- DECRYPT - Indica que a mensagem precisa ser descriptografada
  	: Estrutura
  		========================================
  		CRYPTO <propriedade> <encrypted_message>
  		========================================

    > TCHK
    : Funcionamento
        TATU CHECK - Informa que o cabeçalho do arquivo está correto e a mensagen pode
        ser descriptografada com segurança. Estes quatro caracteres tem que ser o começo de qualquer
        pacote criptografado as quatro letras tem que estar em MAIUSCULO e na ordem apresentada abaixo
        se o pacote não apresentar tal informação o pacote será considerado inválido e descartado
    : Estrutura
        ====================
        TCHK <short_message>
        ====================

Short and Full TPI
-------------------
        Há duas formas de se criar pacotes TPI e são Short e Full. Eles são bem parecidos mas
    tem uma diferença marcanta que é quantidade de caracteres por comando, enquanto que
    no Full as mensagens são escritas de forma completa no Short a única coisa que interessa
    é o primeiro caractere e isso é algo importante no TPI já que como o foco dele é dispositivos
    com recursos limitados não se faz questão de armazenar a string inteira e sim só um caractere.
    
    : Exemplo
        == Full ===
        GET INFO P1
        ===========
        == Short ==
        G    I   P1
        ===========

        Observando o exemplo também fica claro que comparar a string não é o foco do TPI e por isso
    é necessário que a parte importante da string (os primeiros caracteres) e a informação que se
    passa por parametro estejam em corretas, caso contrário a informação não será lida.

	Obs.: Toda requisição acaba com um '\n'
	Obs.: Todo comando é escrito com letras maiusculas

   **** Developed By The TatuDevGroup ****
  **** From Wiser Corporation  -  UFBA **** 
         **** Project Smart UFBA ****
